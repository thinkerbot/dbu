#!/usr/bin/env ruby
begin
  require 'dbu'
  require 'shellwords'

  options = Dbu.options(
    :mode => :exec,
    :opts => [],
    :field_sep => "\t",
    :stream => !$stdin.tty?
  )
  OptionParser.new do |opts|
    opts.banner = %{
usage: dbu conn [options] -- [ARGS...]

  Connect to specified database using the dbu config file and provide the user
  a prompt. If stdin is not a tty then the connection will accept sql and
  format the output as a stream (ie no table decorations and non-result
  output).

options:
}.lstrip

    opts.on("-c", "--config-file CONFIG_FILE", "database config file (#{options[:config_file]})") do |value|
      options[:config_file] = value
    end

    opts.on("-e", "--environment ENVIRONMENT", "database environment (#{options[:environment]})") do |value|
      options[:environment] = value
    end

    opts.on("-F", "--field-sep FIELD_SEP", "field separator for -s (#{options[:field_sep].inspect})") do |value|
      options[:field_sep] = value
    end

    opts.on("-H", "--[no-]headers", "print headers") do |value|
      options[:headers] = value
    end

    opts.on("--debug", "enable debugging") do
      $DEBUG = true
    end

    opts.on("-p", "--preview", "preview command") do
      options[:mode] = :preview
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts Dbu.version
      exit
    end

    opts.on("-s", "--[no-]stream", "stream results") do |value|
      options[:stream] = value
    end

    opts.on("--version", "print version information") do |node|
      puts Dbu.version
      exit
    end
  end.parse!

  config = Dbu.load_db_config(options)
  db = config['dbu']

  case db
  when 'postgres'
    command = ["psql", "-h", config['host'], "-p", config['port'], "-U", config['username'], "-d", config['database']]
    ENV["PGPASSWORD"] = config['password'] if config['password']
  when 'mysql'
    command = ["mysql", "-h", config['host'], "-P", config['port'], "-u", config['username'], config['database']]
    ENV["MYSQL_PWD"] = config['password'] if config['password']
  else
    raise "unsupported dbu database: #{db.inspect}"
  end

  if options[:stream]
    case db
    when 'postgres'
      command += ["--no-align", "--field-separator", options[:field_sep], "--tuples-only", "--quiet"]
    when 'mysql'
      if options[:field_sep] != "\t"
        raise "mysql does not support setting a non-tab field sep"
      end
      command += ["--batch", "--skip-column-names"]
    end
  end

  if options[:headers]
    case db
    when 'postgres'
      command -= ["--tuples-only"]
      command += ["--pset=footer=off"]
    when 'mysql'
      command += ["--column-names"]
    end
  end

  command = Shellwords.shelljoin(command.map(&:to_s) + ARGV)

  case options[:mode]
  when :preview
    puts command
  else
    exec command
  end

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
rescue
  raise if $DEBUG
  $stderr.puts $!.message
  exit 1
end
