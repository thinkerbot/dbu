#!/usr/bin/env ruby
begin
  require 'dbu'
  require 'dbu/parsers'

  options = Dbu.options(
    :mode      => :query,
    :field_sep => "\t",
    :preview   => false,
    :prepare   => false,
    :parser_type => 'line'
  )
  OptionParser.new do |opts|
    opts.banner = %{
usage: dbu stream [options] QUERY_NAME FILES...

  Query things out of the database

options:
}.lstrip

    opts.on("-c", "--config-file CONFIG_FILE", "database config file (#{options[:config_file]})") do |value|
      options[:config_file] = value
    end

    opts.on("--debug", "enable debugging") do
      $DEBUG = true
    end

    opts.on("-e", "--environment ENVIRONMENT", "database environment (#{options[:environment]})") do |value|
      options[:environment] = value
    end

    opts.on("-F", "--field-sep FIELD_SEP", "field separator for -s (#{options[:field_sep].inspect})") do |value|
      options[:field_sep] = value
    end

    opts.on("-H", "--[no-]headers", "print headers") do |value|
      options[:headers] = value
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts Dbu.version
      exit
    end

    opts.on("-j", "--json", "json line input") do
      options[:parser_type] = 'json'
    end

    opts.on("-l", "--list", "list queries") do
      options[:mode] = :list
    end

    opts.on("-p", "--prepare", "prepare query") do
      options[:prepare] = true
    end

    opts.on("-s", "--sql", "print sql") do
      options[:preview] = true
    end

    opts.on("-v", "--verbose", "verbose output") do
      options[:log_level] -= 1
    end

    opts.on("--version", "print version information") do |node|
      puts Dbu.version
      exit
    end
  end.parse!
  Dbu.setup(options)

  config    = Dbu.init_config(options)
  registry  = config.registry

  if options[:mode] == :list
    registry.populate
    queries = registry.queries
    max_len = queries.keys.map(&:length).max
    format  = "  %-#{max_len}s  %s"
    queries.keys.sort.each do |key|
      puts format % [key, queries[key].desc]
    end
    exit
  end

  adapter = config.adapter
  if options[:preview]
    adapter.extend config.previewer
    adapter.io = $stdout
  end

  name = ARGV.shift
  if name.nil?
    raise "no query name specified"
  end

  prepare   = options[:prepare]
  headers   = options[:headers]
  field_sep = options[:field_sep]

  query = registry.lookup(name)
  parser = config.parser(options)

  query.bind(adapter)
  query.prepare if prepare

  while line = ARGF.gets
    args = parser.parse(line)
    rows = \
    if prepare
      query.exec_prepared(args)
    else
      query.exec(args)
    end

    if headers
      headers = adapter.last_headers
      puts headers.join(field_sep) unless headers.empty?
      headers = false
    end

    rows.each do |row|
      puts row.join(field_sep)
    end
  end

  query.unbind

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
rescue
  raise if $DEBUG
  $stderr.puts $!.message
  exit 1
end
