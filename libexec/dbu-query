#!/usr/bin/env ruby
begin
  require 'dbu'

  options = Dbu.options(
    :mode => :query,
    :preview => false,
    :prepare => false,
    :field_sep => "\t",
  )
  OptionParser.new do |opts|
    opts.banner = %{
usage: dbu query [options] QUERY_NAME ARGS...

  Query things out of the database

options:
}.lstrip

    opts.on("-c", "--config-file CONFIG_FILE", "database config file (#{options[:config_file]})") do |value|
      options[:config_file] = value
    end

    opts.on("--debug", "enable debugging") do
      $DEBUG = true
    end

    opts.on("-e", "--environment ENVIRONMENT", "database environment (#{options[:environment]})") do |value|
      options[:environment] = value
    end

    opts.on("-F", "--field-sep FIELD_SEP", "field separator for -s (#{options[:field_sep].inspect})") do |value|
      options[:field_sep] = value
    end

    opts.on("-H", "--[no-]headers", "print headers") do |value|
      options[:headers] = value
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts Dbu.version
      exit
    end

    opts.on("-l", "--list", "list queries") do
      options[:mode] = :list
    end

    opts.on("-p", "--prepare", "prepare query") do
      options[:prepare] = true
    end

    opts.on("-s", "--sql", "print query") do
      options[:preview] = true
    end

    opts.on("-v", "--verbose", "verbose output") do
      options[:log_level] -= 1
    end

    opts.on("--version", "print version information") do |node|
      puts Dbu.version
      exit
    end
  end.parse!
  Dbu.setup(options)

  name, *args = ARGV.dup; ARGV.clear

  config    = Dbu.init_config(options)
  registry  = config.registry

  if options[:mode] == :list
    registry.populate
    queries = registry.queries
    max_len = queries.keys.map(&:length).max
    format  = "  %-#{max_len}s  %s"
    queries.keys.sort.each do |key|
      puts format % [key, queries[key].desc]
    end
    exit
  end

  adapter = config.adapter
  if options[:preview]
    adapter.extend config.previewer
    adapter.io = $stdout
  end

  query = registry.lookup(name)
  query.bind(adapter)

  rows = \
  if options[:prepare]
    query.prepare
    query.exec_prepared(args)
  else
    query.exec(args)
  end

  field_sep = options[:field_sep]
  if options[:headers]
    headers = adapter.last_headers
    puts headers.join(field_sep) unless headers.empty?
  end

  rows.each do |row|
    puts row.join(field_sep)
  end

  query.unbind

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
rescue
  raise if $DEBUG
  $stderr.puts $!.message
  exit 1
end
