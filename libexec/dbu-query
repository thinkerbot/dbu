#!/usr/bin/env ruby
begin
  require 'dbu'

  options = Dbu.options(
    :mode => :query,
    :field_sep => "\t",
  )
  OptionParser.new do |opts|
    opts.banner = %{
usage: dbu query [options] THING ARGS...

  Query things out of the database

options:
}.lstrip

    opts.on("-c", "--config-file CONFIG_FILE", "database config file (#{options[:config_file]})") do |value|
      options[:config_file] = value
    end

    opts.on("--debug", "enable debugging") do
      $DEBUG = true
    end

    opts.on("-e", "--environment ENVIRONMENT", "database environment (#{options[:environment]})") do |value|
      options[:environment] = value
    end

    opts.on("-F", "--field-sep FIELD_SEP", "field separator for -s (#{options[:field_sep].inspect})") do |value|
      options[:field_sep] = value
    end

    opts.on("-H", "--[no-]headers", "print headers") do |value|
      options[:headers] = value
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts Dbu.version
      exit
    end

    opts.on("-l", "--list", "list queries") do
      options[:mode] = :list
    end

    opts.on("-p", "--preview", "preview command") do
      options[:mode] = :preview
    end

    opts.on("-v", "--verbose", "verbose output") do
      options[:level] -= 1
    end

    opts.on("--version", "print version information") do |node|
      puts Dbu.version
      exit
    end
  end.parse!
  Dbu.setup(options)

  name, *args = ARGV.dup; ARGV.clear

  config = Dbu.load_db_config(options)
  adapter  = config.adapter
  registry = config.registry

  key, sql, signature = registry.lookup(name, args)

  mode = options[:mode]
  case mode
  when :query
    adapter.prepare(key, sql)
    adapter.each_line(key, args, options) do |line|
      puts line
    end
  when :preview
    puts sql
    puts args.inspect
  else
    raise "invalid mode: #{mode.inspect}"
  end

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
rescue
  raise if $DEBUG
  $stderr.puts $!.message
  exit 1
end
